package protocol

import (
	"bufio"
	"bytes"
	motan "github.com/weibocom/motan-go/core"
	"strconv"
	"strings"
	"testing"
)

var (
	// req
	testV1ReqBytes               = []byte{241, 241, 0, 0, 24, 49, 255, 251, 240, 224, 0, 2, 0, 0, 0, 246, 240, 240, 1, 0, 24, 49, 255, 251, 240, 224, 0, 2, 0, 0, 0, 230, 172, 237, 0, 5, 119, 72, 0, 45, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 109, 111, 116, 97, 110, 46, 100, 101, 109, 111, 46, 115, 101, 114, 118, 105, 99, 101, 46, 77, 111, 116, 97, 110, 68, 101, 109, 111, 83, 101, 114, 118, 105, 99, 101, 0, 5, 104, 101, 108, 108, 111, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 0, 7, 6, 109, 111, 116, 97, 110, 48, 119, 120, 0, 0, 0, 5, 0, 11, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 0, 11, 109, 121, 77, 111, 116, 97, 110, 68, 101, 109, 111, 0, 11, 99, 108, 105, 101, 110, 116, 71, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 6, 109, 111, 100, 117, 108, 101, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 3, 49, 46, 48, 0, 5, 103, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99}
	testV1NoParamReqBytes        = []byte{241, 241, 0, 0, 24, 50, 5, 245, 221, 16, 0, 2, 0, 0, 0, 204, 240, 240, 1, 0, 24, 50, 5, 245, 221, 16, 0, 2, 0, 0, 0, 188, 172, 237, 0, 5, 119, 182, 0, 45, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 109, 111, 116, 97, 110, 46, 100, 101, 109, 111, 46, 115, 101, 114, 118, 105, 99, 101, 46, 77, 111, 116, 97, 110, 68, 101, 109, 111, 83, 101, 114, 118, 105, 99, 101, 0, 7, 110, 111, 80, 97, 114, 97, 109, 0, 4, 118, 111, 105, 100, 0, 0, 0, 5, 0, 11, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 0, 11, 109, 121, 77, 111, 116, 97, 110, 68, 101, 109, 111, 0, 11, 99, 108, 105, 101, 110, 116, 71, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 6, 109, 111, 100, 117, 108, 101, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 3, 49, 46, 48, 0, 5, 103, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99}
	testV1MultiParamReqBytes     = []byte{241, 241, 0, 0, 24, 50, 6, 143, 123, 0, 0, 1, 0, 0, 1, 98, 240, 240, 1, 0, 24, 50, 6, 143, 123, 0, 0, 1, 0, 0, 1, 82, 172, 237, 0, 5, 119, 113, 0, 45, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 109, 111, 116, 97, 110, 46, 100, 101, 109, 111, 46, 115, 101, 114, 118, 105, 99, 101, 46, 77, 111, 116, 97, 110, 68, 101, 109, 111, 83, 101, 114, 118, 105, 99, 101, 0, 6, 114, 101, 110, 97, 109, 101, 0, 56, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 109, 111, 116, 97, 110, 46, 100, 101, 109, 111, 46, 115, 101, 114, 118, 105, 99, 101, 46, 109, 111, 100, 101, 108, 46, 85, 115, 101, 114, 44, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 0, 59, 67, 48, 39, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 109, 111, 116, 97, 110, 46, 100, 101, 109, 111, 46, 115, 101, 114, 118, 105, 99, 101, 46, 109, 111, 100, 101, 108, 46, 85, 115, 101, 114, 146, 2, 105, 100, 4, 110, 97, 109, 101, 96, 212, 8, 86, 3, 114, 97, 121, 117, 113, 0, 126, 0, 0, 0, 0, 0, 5, 4, 114, 97, 121, 48, 119, 120, 0, 0, 0, 5, 0, 11, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 0, 11, 109, 121, 77, 111, 116, 97, 110, 68, 101, 109, 111, 0, 11, 99, 108, 105, 101, 110, 116, 71, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 6, 109, 111, 100, 117, 108, 101, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 3, 49, 46, 48, 0, 5, 103, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99}
	testV1CompressReqBytes       = []byte{241, 241, 0, 0, 24, 50, 6, 247, 234, 112, 0, 2, 0, 0, 0, 224, 240, 240, 2, 0, 24, 50, 6, 247, 234, 112, 0, 2, 0, 0, 0, 208, 172, 237, 0, 5, 119, 21, 0, 1, 49, 0, 16, 104, 101, 108, 108, 56, 49, 55, 102, 102, 51, 55, 51, 51, 50, 54, 57, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 0, 7, 6, 109, 111, 116, 97, 110, 48, 119, 149, 0, 7, 0, 2, 95, 65, 0, 4, 52, 57, 57, 54, 0, 11, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 0, 11, 109, 121, 77, 111, 116, 97, 110, 68, 101, 109, 111, 0, 11, 99, 108, 105, 101, 110, 116, 71, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 6, 109, 111, 100, 117, 108, 101, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 14, 67, 111, 110, 116, 101, 110, 116, 45, 76, 101, 110, 103, 116, 104, 0, 3, 49, 57, 56, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 3, 49, 46, 48, 0, 5, 103, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99}
	testV1CompressGzipReqBytes   = []byte{241, 241, 0, 0, 24, 50, 6, 247, 234, 112, 0, 2, 0, 0, 0, 202, 240, 240, 2, 0, 24, 50, 6, 247, 234, 112, 0, 2, 0, 0, 0, 186, 31, 139, 8, 0, 0, 0, 0, 0, 0, 0, 91, 243, 150, 129, 181, 92, 148, 129, 209, 144, 65, 32, 35, 53, 39, 199, 194, 208, 60, 45, 205, 216, 220, 216, 216, 200, 204, 178, 180, 136, 129, 41, 218, 105, 205, 103, 241, 31, 108, 28, 33, 15, 152, 24, 24, 42, 10, 24, 24, 24, 216, 217, 114, 243, 75, 18, 243, 12, 202, 167, 50, 176, 51, 48, 197, 59, 50, 176, 152, 88, 90, 154, 49, 112, 39, 22, 20, 228, 100, 38, 39, 150, 100, 230, 231, 49, 112, 231, 86, 250, 130, 20, 185, 164, 230, 230, 51, 112, 39, 231, 100, 166, 230, 149, 184, 23, 229, 151, 22, 48, 240, 129, 53, 235, 166, 0, 37, 116, 139, 10, 146, 25, 128, 134, 165, 148, 230, 164, 98, 136, 243, 57, 231, 231, 149, 0, 117, 233, 250, 164, 230, 165, 151, 100, 48, 48, 27, 153, 24, 48, 176, 151, 165, 22, 21, 131, 204, 103, 54, 212, 51, 96, 96, 77, 199, 102, 34, 0, 179, 189, 51, 70, 208, 0, 0, 0}
	testV1LongAttachmentReqBytes = []byte{241, 241, 0, 0, 24, 90, 11, 154, 159, 176, 0, 1, 0, 0, 5, 185, 240, 240, 1, 0, 24, 90, 11, 154, 159, 176, 0, 1, 0, 0, 5, 169, 172, 237, 0, 5, 119, 72, 0, 45, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 109, 111, 116, 97, 110, 46, 100, 101, 109, 111, 46, 115, 101, 114, 118, 105, 99, 101, 46, 77, 111, 116, 97, 110, 68, 101, 109, 111, 83, 101, 114, 118, 105, 99, 101, 0, 5, 104, 101, 108, 108, 111, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 0, 7, 6, 109, 111, 116, 97, 110, 48, 122, 0, 0, 4, 0, 0, 0, 0, 6, 0, 11, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 0, 11, 109, 121, 77, 111, 116, 97, 110, 68, 101, 109, 111, 0, 11, 99, 108, 105, 101, 110, 116, 71, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 6, 109, 111, 100, 117, 108, 101, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 7, 116, 101, 109, 112, 107, 101, 121, 4, 176, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 0, 0, 1, 51, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 122, 120, 99, 118, 98, 97, 115, 100, 102, 103, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 3, 49, 46, 48, 0, 5, 103, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99}
	testV1ChAttachmentReqBytes   = []byte{241, 241, 0, 0, 24, 90, 165, 145, 27, 0, 0, 1, 0, 0, 1, 16, 240, 240, 1, 0, 24, 90, 165, 145, 27, 0, 0, 1, 0, 0, 1, 0, 172, 237, 0, 5, 119, 72, 0, 45, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 109, 111, 116, 97, 110, 46, 100, 101, 109, 111, 46, 115, 101, 114, 118, 105, 99, 101, 46, 77, 111, 116, 97, 110, 68, 101, 109, 111, 83, 101, 114, 118, 105, 99, 101, 0, 5, 104, 101, 108, 108, 111, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 0, 7, 6, 109, 111, 116, 97, 110, 48, 119, 146, 0, 0, 0, 6, 0, 11, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 0, 11, 109, 121, 77, 111, 116, 97, 110, 68, 101, 109, 111, 0, 11, 99, 108, 105, 101, 110, 116, 71, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 6, 109, 111, 100, 117, 108, 101, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99, 0, 7, 118, 101, 114, 115, 105, 111, 110, 0, 3, 49, 46, 48, 0, 10, 107, 101, 121, 45, 228, 184, 173, 230, 150, 135, 0, 12, 118, 97, 108, 117, 101, 45, 228, 184, 173, 230, 150, 135, 0, 5, 103, 114, 111, 117, 112, 0, 14, 109, 111, 116, 97, 110, 45, 100, 101, 109, 111, 45, 114, 112, 99}

	// res
	testV1ResBytes                       = []byte{241, 241, 0, 1, 24, 49, 255, 251, 240, 224, 0, 2, 0, 0, 0, 85, 240, 240, 1, 1, 24, 49, 255, 251, 240, 224, 0, 2, 0, 0, 0, 69, 172, 237, 0, 5, 119, 26, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 0, 14, 13, 72, 101, 108, 108, 111, 32, 109, 111, 116, 97, 110, 48, 33}
	testV1VoidResBytes                   = []byte{241, 241, 0, 1, 24, 50, 6, 24, 127, 0, 0, 3, 0, 0, 0, 30, 240, 240, 1, 3, 24, 50, 6, 24, 127, 0, 0, 3, 0, 0, 0, 14, 172, 237, 0, 5, 119, 8, 0, 0, 0, 0, 0, 0, 0, 1}
	testV1ExceptionResBytes              = []byte{241, 241, 0, 1, 24, 50, 6, 67, 57, 48, 0, 4, 0, 0, 7, 184, 240, 240, 1, 5, 24, 50, 6, 67, 57, 48, 0, 4, 0, 0, 7, 168, 172, 237, 0, 5, 119, 57, 0, 0, 0, 0, 0, 0, 0, 24, 0, 47, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 46, 77, 111, 116, 97, 110, 66, 105, 122, 69, 120, 99, 101, 112, 116, 105, 111, 110, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 7, 82, 67, 48, 47, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 46, 77, 111, 116, 97, 110, 66, 105, 122, 69, 120, 99, 101, 112, 116, 105, 111, 110, 150, 8, 101, 114, 114, 111, 114, 77, 115, 103, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 5, 99, 97, 117, 115, 101, 13, 109, 111, 116, 97, 110, 69, 114, 114, 111, 114, 77, 115, 103, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 96, 27, 112, 114, 111, 118, 105, 100, 101, 114, 32, 99, 97, 108, 108, 32, 112, 114, 111, 99, 101, 115, 115, 32, 101, 114, 114, 111, 114, 27, 112, 114, 111, 118, 105, 100, 101, 114, 32, 99, 97, 108, 108, 32, 112, 114, 111, 99, 101, 115, 115, 32, 101, 114, 114, 111, 114, 67, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 148, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 5, 99, 97, 117, 115, 101, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 97, 14, 106, 117, 115, 116, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 81, 145, 113, 28, 91, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 67, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 148, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 8, 102, 105, 108, 101, 78, 97, 109, 101, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 98, 11, 114, 101, 109, 111, 116, 101, 67, 108, 97, 115, 115, 12, 114, 101, 109, 111, 116, 101, 77, 101, 116, 104, 111, 100, 10, 114, 101, 109, 111, 116, 101, 70, 105, 108, 101, 145, 112, 48, 38, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 85, 110, 109, 111, 100, 105, 102, 105, 97, 98, 108, 101, 76, 105, 115, 116, 67, 48, 43, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 46, 77, 111, 116, 97, 110, 69, 114, 114, 111, 114, 77, 115, 103, 147, 6, 115, 116, 97, 116, 117, 115, 9, 101, 114, 114, 111, 114, 99, 111, 100, 101, 7, 109, 101, 115, 115, 97, 103, 101, 99, 201, 247, 212, 117, 49, 14, 112, 114, 111, 118, 105, 100, 101, 114, 32, 101, 114, 114, 111, 114, 86, 144, 159, 98, 48, 39, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 114, 112, 99, 46, 68, 101, 102, 97, 117, 108, 116, 80, 114, 111, 118, 105, 100, 101, 114, 6, 105, 110, 118, 111, 107, 101, 20, 68, 101, 102, 97, 117, 108, 116, 80, 114, 111, 118, 105, 100, 101, 114, 46, 106, 97, 118, 97, 200, 68, 98, 48, 40, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 114, 112, 99, 46, 65, 98, 115, 116, 114, 97, 99, 116, 80, 114, 111, 118, 105, 100, 101, 114, 4, 99, 97, 108, 108, 21, 65, 98, 115, 116, 114, 97, 99, 116, 80, 114, 111, 118, 105, 100, 101, 114, 46, 106, 97, 118, 97, 200, 52, 98, 48, 42, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 102, 105, 108, 116, 101, 114, 46, 65, 99, 99, 101, 115, 115, 76, 111, 103, 70, 105, 108, 116, 101, 114, 6, 102, 105, 108, 116, 101, 114, 20, 65, 99, 99, 101, 115, 115, 76, 111, 103, 70, 105, 108, 116, 101, 114, 46, 106, 97, 118, 97, 200, 73, 98, 48, 62, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 112, 114, 111, 116, 111, 99, 111, 108, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 114, 111, 116, 111, 99, 111, 108, 70, 105, 108, 116, 101, 114, 68, 101, 99, 111, 114, 97, 116, 111, 114, 36, 50, 4, 99, 97, 108, 108, 28, 80, 114, 111, 116, 111, 99, 111, 108, 70, 105, 108, 116, 101, 114, 68, 101, 99, 111, 114, 97, 116, 111, 114, 46, 106, 97, 118, 97, 200, 150, 98, 48, 54, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 68, 101, 102, 97, 117, 108, 116, 80, 114, 111, 116, 101, 99, 116, 101, 100, 83, 116, 114, 97, 116, 101, 103, 121, 4, 99, 97, 108, 108, 29, 68, 101, 102, 97, 117, 108, 116, 80, 114, 111, 116, 101, 99, 116, 101, 100, 83, 116, 114, 97, 116, 101, 103, 121, 46, 106, 97, 118, 97, 200, 82, 98, 48, 51, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 80, 114, 111, 118, 105, 100, 101, 114, 77, 101, 115, 115, 97, 103, 101, 82, 111, 117, 116, 101, 114, 4, 99, 97, 108, 108, 26, 80, 114, 111, 118, 105, 100, 101, 114, 77, 101, 115, 115, 97, 103, 101, 82, 111, 117, 116, 101, 114, 46, 106, 97, 118, 97, 200, 114, 98, 48, 51, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 80, 114, 111, 118, 105, 100, 101, 114, 77, 101, 115, 115, 97, 103, 101, 82, 111, 117, 116, 101, 114, 6, 104, 97, 110, 100, 108, 101, 26, 80, 114, 111, 118, 105, 100, 101, 114, 77, 101, 115, 115, 97, 103, 101, 82, 111, 117, 116, 101, 114, 46, 106, 97, 118, 97, 200, 106, 98, 48, 90, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 115, 117, 112, 112, 111, 114, 116, 46, 68, 101, 102, 97, 117, 108, 116, 82, 112, 99, 72, 101, 97, 114, 116, 98, 101, 97, 116, 70, 97, 99, 116, 111, 114, 121, 36, 72, 101, 97, 114, 116, 77, 101, 115, 115, 97, 103, 101, 72, 97, 110, 100, 108, 101, 87, 114, 97, 112, 112, 101, 114, 6, 104, 97, 110, 100, 108, 101, 31, 68, 101, 102, 97, 117, 108, 116, 82, 112, 99, 72, 101, 97, 114, 116, 98, 101, 97, 116, 70, 97, 99, 116, 111, 114, 121, 46, 106, 97, 118, 97, 200, 100, 98, 48, 56, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 110, 101, 116, 116, 121, 52, 46, 78, 101, 116, 116, 121, 67, 104, 97, 110, 110, 101, 108, 72, 97, 110, 100, 108, 101, 114, 14, 112, 114, 111, 99, 101, 115, 115, 82, 101, 113, 117, 101, 115, 116, 24, 78, 101, 116, 116, 121, 67, 104, 97, 110, 110, 101, 108, 72, 97, 110, 100, 108, 101, 114, 46, 106, 97, 118, 97, 200, 152, 98, 48, 56, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 110, 101, 116, 116, 121, 52, 46, 78, 101, 116, 116, 121, 67, 104, 97, 110, 110, 101, 108, 72, 97, 110, 100, 108, 101, 114, 14, 112, 114, 111, 99, 101, 115, 115, 77, 101, 115, 115, 97, 103, 101, 24, 78, 101, 116, 116, 121, 67, 104, 97, 110, 110, 101, 108, 72, 97, 110, 100, 108, 101, 114, 46, 106, 97, 118, 97, 200, 135, 98, 48, 56, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 110, 101, 116, 116, 121, 52, 46, 78, 101, 116, 116, 121, 67, 104, 97, 110, 110, 101, 108, 72, 97, 110, 100, 108, 101, 114, 10, 97, 99, 99, 101, 115, 115, 36, 48, 48, 48, 24, 78, 101, 116, 116, 121, 67, 104, 97, 110, 110, 101, 108, 72, 97, 110, 100, 108, 101, 114, 46, 106, 97, 118, 97, 177, 98, 48, 58, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 116, 114, 97, 110, 115, 112, 111, 114, 116, 46, 110, 101, 116, 116, 121, 52, 46, 78, 101, 116, 116, 121, 67, 104, 97, 110, 110, 101, 108, 72, 97, 110, 100, 108, 101, 114, 36, 49, 3, 114, 117, 110, 24, 78, 101, 116, 116, 121, 67, 104, 97, 110, 110, 101, 108, 72, 97, 110, 100, 108, 101, 114, 46, 106, 97, 118, 97, 200, 74, 98, 48, 39, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 84, 104, 114, 101, 97, 100, 80, 111, 111, 108, 69, 120, 101, 99, 117, 116, 111, 114, 9, 114, 117, 110, 87, 111, 114, 107, 101, 114, 23, 84, 104, 114, 101, 97, 100, 80, 111, 111, 108, 69, 120, 101, 99, 117, 116, 111, 114, 46, 106, 97, 118, 97, 204, 118, 98, 48, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 84, 104, 114, 101, 97, 100, 80, 111, 111, 108, 69, 120, 101, 99, 117, 116, 111, 114, 36, 87, 111, 114, 107, 101, 114, 3, 114, 117, 110, 23, 84, 104, 114, 101, 97, 100, 80, 111, 111, 108, 69, 120, 101, 99, 117, 116, 111, 114, 46, 106, 97, 118, 97, 202, 105, 98, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 3, 114, 117, 110, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 202, 233, 81, 148}
	testV1CompressResBytes               = []byte{241, 241, 0, 1, 24, 50, 9, 120, 9, 240, 0, 1, 0, 0, 0, 89, 240, 240, 2, 7, 24, 50, 9, 120, 9, 240, 0, 1, 0, 0, 0, 73, 172, 237, 0, 5, 119, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 0, 14, 13, 72, 101, 108, 108, 111, 32, 109, 111, 116, 97, 110, 48, 33, 119, 2, 0, 0}
	testV1CompressGzipResBytes           = []byte{241, 241, 0, 1, 24, 50, 9, 147, 104, 80, 0, 1, 0, 0, 0, 101, 240, 240, 2, 7, 24, 50, 9, 147, 104, 80, 0, 1, 0, 0, 0, 85, 31, 139, 8, 0, 0, 0, 0, 0, 0, 0, 91, 243, 150, 129, 181, 92, 138, 1, 6, 4, 178, 18, 203, 18, 245, 114, 18, 243, 210, 245, 130, 75, 138, 50, 243, 210, 75, 139, 24, 152, 162, 157, 214, 124, 22, 255, 193, 198, 17, 242, 128, 137, 129, 161, 162, 0, 168, 140, 143, 215, 35, 53, 39, 39, 95, 33, 55, 191, 36, 49, 207, 64, 177, 28, 40, 14, 0, 147, 111, 110, 27, 73, 0, 0, 0}
	testV1CompressWithAttachmentResBytes = []byte{241, 241, 0, 1, 24, 50, 9, 213, 235, 80, 0, 1, 0, 0, 0, 129, 240, 240, 2, 7, 24, 50, 9, 213, 235, 80, 0, 1, 0, 0, 0, 113, 31, 139, 8, 0, 0, 0, 0, 0, 0, 0, 91, 243, 150, 129, 181, 92, 138, 1, 6, 4, 178, 18, 203, 18, 245, 114, 18, 243, 210, 245, 130, 75, 138, 50, 243, 210, 75, 139, 24, 152, 162, 157, 214, 124, 22, 255, 193, 198, 17, 242, 128, 137, 129, 161, 162, 0, 168, 140, 143, 215, 35, 53, 39, 39, 95, 33, 55, 191, 36, 49, 207, 64, 177, 92, 145, 129, 137, 129, 41, 222, 145, 129, 163, 36, 181, 184, 36, 56, 51, 61, 143, 129, 57, 62, 212, 145, 129, 11, 196, 13, 205, 3, 9, 0, 0, 125, 32, 68, 112, 104, 0, 0, 0}

	// heartbeat
	testV1HeartbeatReq = []byte{241, 241, 0, 0, 24, 44, 223, 176, 126, 80, 0, 96, 0, 0, 0, 78, 240, 240, 1, 0, 24, 44, 223, 176, 126, 80, 0, 96, 0, 0, 0, 62, 172, 237, 0, 5, 119, 56, 0, 33, 99, 111, 109, 46, 119, 101, 105, 98, 111, 46, 97, 112, 105, 46, 109, 111, 116, 97, 110, 46, 114, 112, 99, 46, 104, 101, 97, 114, 116, 98, 101, 97, 116, 0, 9, 104, 101, 97, 114, 116, 98, 101, 97, 116, 0, 4, 118, 111, 105, 100, 0, 0, 0, 0}
	testV1HeartbeatRes = []byte{241, 241, 0, 1, 24, 44, 226, 160, 201, 25, 2, 108, 0, 0, 0, 81, 240, 240, 1, 1, 24, 44, 226, 160, 201, 25, 2, 108, 0, 0, 0, 65, 172, 237, 0, 5, 119, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 117, 114, 0, 2, 91, 66, 172, 243, 23, 248, 6, 8, 84, 224, 2, 0, 0, 120, 112, 0, 0, 0, 10, 9, 104, 101, 97, 114, 116, 98, 101, 97, 116}
)

var (
	serviceName = "com.weibo.motan.demo.service.MotanDemoService"
	method      = "hello"
	methodDesc  = "java.lang.String"
	group       = "motan-demo-rpc"
)

func TestEncodeMotanV1Request(t *testing.T) {
	baseV1Msg := buildV1Msg(t, testV1ReqBytes)
	req, err := DecodeMotanV1Request(baseV1Msg)
	if err != nil {
		t.Fatalf("encode v1 req fail. err:%v", err)
	}

	rid := uint64(7348937488)
	bs, err := EncodeMotanV1Request(req, rid)
	if err != nil {
		t.Fatalf("encode v1 req fail. err:%v", err)
	}
	assertTrue(len(bs) == len(testV1ReqBytes), "v1 encode req lens", t)

	v1Msg := buildV1Msg(t, bs)
	req2, err := DecodeMotanV1Request(v1Msg)
	if err != nil {
		t.Fatalf("read v1 req msg fail. err:%v", err)
	}
	checkBaseReq(req2, rid, t)

	// test request clone
	cloneReq := req2.Clone().(motan.Request)
	checkBaseReq(cloneReq, rid, t)
	assertTrue(cloneReq.GetRPCContext(true).OriginalMessage == v1Msg, "request originMessage", t)
}

func checkBaseReq(req motan.Request, rid uint64, t *testing.T) {
	assertTrue(req.GetRequestID() == rid, "v1req rid", t)
	assertTrue(req.GetServiceName() == serviceName, "v1req service name", t)
	assertTrue(req.GetMethod() == method, "v1req method", t)
	assertTrue(req.GetMethodDesc() == methodDesc, "v1req method desc", t)
	assertTrue(req.GetAttachment("group") == group, "v1req group", t)
	assertTrue(req.GetAttachments().Len() == 5, "v1req attachment size", t)
}

func TestEncodeMotanV1Response(t *testing.T) {
	baseV1Msg := buildV1Msg(t, testV1ResBytes)
	res, err := DecodeMotanV1Response(baseV1Msg)
	if err != nil {
		t.Fatalf("encode v1 res fail. err:%v", err)
	}

	bs, err := EncodeMotanV1Response(res)
	if err != nil {
		t.Fatalf("encode v1 res fail. err:%v", err)
	}
	assertTrue(len(bs) == len(testV1ResBytes), "v1 encode res lens", t)

	v1Msg := buildV1Msg(t, bs)
	res2, err := DecodeMotanV1Response(v1Msg)
	if err != nil {
		t.Fatalf("read v1 res msg fail. err:%v", err)
	}
	assertTrue(res2.GetRequestID() == res.GetRequestID(), "v1 res rid", t)
	assertTrue(res2.GetProcessTime() == 1, "v1 res process time", t)
}

type reqTestInfo struct {
	name           string
	expectMsg      *MotanV1Message
	serviceName    string
	method         string
	methodDesc     string
	attachmentSize int
}

type resTestInfo struct {
	name           string
	expectMsg      *MotanV1Message
	processTime    int64
	hasException   bool
	attachmentSize int
}

func TestParseV1ReqMessage(t *testing.T) {
	tests := []*reqTestInfo{
		{"normal req", &MotanV1Message{OriginBytes: testV1ReqBytes, V1InnerVersion: 1, Flag: 0, Rid: 1743455988312178690, InnerLength: 230}, "com.weibo.motan.demo.service.MotanDemoService", "hello", "java.lang.String", 5},
		{"no param req", &MotanV1Message{OriginBytes: testV1NoParamReqBytes, V1InnerVersion: 1, Flag: 0, Rid: 1743462559279742978, InnerLength: 188}, "com.weibo.motan.demo.service.MotanDemoService", "noParam", "void", 5},
		{"multi params req", &MotanV1Message{OriginBytes: testV1MultiParamReqBytes, V1InnerVersion: 1, Flag: 0, Rid: 1743463219059490817, InnerLength: 338}, "com.weibo.motan.demo.service.MotanDemoService", "rename", "com.weibo.motan.demo.service.model.User,java.lang.String", 5},
		{"compress req", &MotanV1Message{OriginBytes: testV1CompressReqBytes, V1InnerVersion: 2, Flag: 0, Rid: 1743463667605700610, InnerLength: 208}, "v1compressMethodSign", "hell817ff3733269", "", 7},
		{"compress gzip req", &MotanV1Message{OriginBytes: testV1CompressGzipReqBytes, V1InnerVersion: 2, Flag: 0, Rid: 1743463667605700610, InnerLength: 186}, "v1compressMethodSign", "hell817ff3733269", "", 7},
		{"long attachment req", &MotanV1Message{OriginBytes: testV1LongAttachmentReqBytes, V1InnerVersion: 1, Flag: 0, Rid: 1754727763546210305, InnerLength: 1449}, "com.weibo.motan.demo.service.MotanDemoService", "hello", "java.lang.String", 6},
		{"Chinese attachment req", &MotanV1Message{OriginBytes: testV1ChAttachmentReqBytes, V1InnerVersion: 1, Flag: 0, Rid: 1754897047456055297, InnerLength: 256}, "com.weibo.motan.demo.service.MotanDemoService", "hello", "java.lang.String", 6},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			checkReq(t, tt)
		})
	}
}

func TestParseV1ResMessage(t *testing.T) {
	tests := []*resTestInfo{
		{"normal res", &MotanV1Message{OriginBytes: testV1ResBytes, V1InnerVersion: 1, Flag: 1, Rid: 1743455988312178690, InnerLength: 69}, 1, false, 0},
		{"void res", &MotanV1Message{OriginBytes: testV1VoidResBytes, V1InnerVersion: 1, Flag: 3, Rid: 1743462708025491459, InnerLength: 14}, 1, false, 0},
		{"exception res", &MotanV1Message{OriginBytes: testV1ExceptionResBytes, V1InnerVersion: 1, Flag: 5, Rid: 1743462891537825796, InnerLength: 1960}, 24, true, 0},
		{"compress res", &MotanV1Message{OriginBytes: testV1CompressResBytes, V1InnerVersion: 2, Flag: 7, Rid: 1743466416913252353, InnerLength: 73}, 0, false, 0},
		{"compress gzip res", &MotanV1Message{OriginBytes: testV1CompressGzipResBytes, V1InnerVersion: 2, Flag: 7, Rid: 1743466534460719105, InnerLength: 85}, 0, false, 0},
		{"compress gzip attachment res", &MotanV1Message{OriginBytes: testV1CompressWithAttachmentResBytes, V1InnerVersion: 2, Flag: 7, Rid: 1743466820126375937, InnerLength: 113}, 0, false, 0},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			checkRes(t, tt)
		})
	}
}

func checkReq(t *testing.T, info *reqTestInfo) {
	msg := buildV1Msg(t, info.expectMsg.OriginBytes)
	checkMsg(t, msg, info.expectMsg)

	req, err := DecodeMotanV1Request(msg)
	if err != nil {
		t.Fatalf("read v1 req msg fail. err:%v", err)
	}
	assertTrue(req.GetRequestID() == info.expectMsg.Rid, "req rid", t)
	assertTrue(req.GetServiceName() == info.serviceName, "req service name", t)
	assertTrue(req.GetMethod() == info.method, "req method", t)
	assertTrue(req.GetMethodDesc() == info.methodDesc, "req method desc", t)
	assertTrue(req.GetAttachments().Len() == info.attachmentSize, "req attachment size", t)

	// check attachment change
	keyPrefix := "newKey"
	valuePrefix := "newValue#j349中文2jd9872340jdjk-"
	num := 10
	for i := 0; i < num; i++ {
		req.SetAttachment(keyPrefix+strconv.Itoa(i), valuePrefix+strconv.Itoa(i))
	}
	newRid := uint64(273948723984)
	encBytes, err := EncodeMotanV1Request(req, newRid)
	msg2 := buildV1Msg(t, encBytes)
	req2, err := DecodeMotanV1Request(msg2)
	if err != nil {
		t.Fatalf("read v1 req msg fail. err:%v", err)
	}
	assertTrue(req2.GetRequestID() == newRid, "req rid", t)
	assertTrue(req2.GetServiceName() == info.serviceName, "req service name", t)
	assertTrue(req2.GetMethod() == info.method, "req method", t)
	assertTrue(req2.GetMethodDesc() == info.methodDesc, "req method desc", t)
	assertTrue(req2.GetAttachments().Len() == info.attachmentSize+num, "req attachment size", t)
	cnt := 0
	req2.GetAttachments().Range(func(k, v string) bool {
		if strings.HasPrefix(k, keyPrefix) {
			cnt++
			if !strings.HasPrefix(v, valuePrefix) {
				return false
			}
		}
		return true
	})
	assertTrue(cnt == num, "add attachment check", t)
}

func checkRes(t *testing.T, info *resTestInfo) {
	msg := buildV1Msg(t, info.expectMsg.OriginBytes)
	checkMsg(t, msg, info.expectMsg)

	res, err := DecodeMotanV1Response(msg)
	if err != nil {
		t.Fatalf("read v1 res msg fail. err:%v", err)
	}
	assertTrue(res.GetRequestID() == info.expectMsg.Rid, "res rid", t)
	assertTrue(res.GetProcessTime() == info.processTime, "res process time", t)
	assertTrue((res.GetException() != nil) == info.hasException, "res has exception", t)
	size := 0
	if res.GetAttachments() != nil {
		size = res.GetAttachments().Len()
	}
	assertTrue(size == info.attachmentSize, "res attachment size", t)
}

func buildV1Msg(t *testing.T, bytes []byte) *MotanV1Message {
	msg, _, err := ReadV1Message(bufio.NewReader(motan.CreateBytesBuffer(bytes)), DefaultMaxContentLength)
	if err != nil {
		t.Fatalf("read v1 msg fail. err:%v", err)
	}
	return msg
}

func checkMsg(t *testing.T, msg *MotanV1Message, expectMsg *MotanV1Message) {
	assertTrue(bytes.Equal(msg.OriginBytes, expectMsg.OriginBytes), "msg ori bytes", t)
	assertTrue(msg.Rid == expectMsg.Rid, "msg rid", t)
	assertTrue(msg.V1InnerVersion == expectMsg.V1InnerVersion, "msg inner version", t)
	assertTrue(msg.Flag == expectMsg.Flag, "msg flag", t)
	assertTrue(msg.InnerLength == expectMsg.InnerLength, "msg inner length", t)
	// TODO
}

func TestHeartbeatReq(t *testing.T) {
	// const heartbeat bytes validate
	checkHeartbeatReq(t, testV1HeartbeatReq, 1742013105011949664)

	// build heartbeat req
	rid := uint64(3479837409)
	bs := BuildV1HeartbeatReq(rid)
	checkHeartbeatReq(t, bs, rid)
}

func TestHeartbeatRes(t *testing.T) {
	// const heartbeat bytes validate
	checkHeartbeatRes(t, testV1HeartbeatRes, 1742016336082043500)

	// build heartbeat res
	rid := uint64(3479837409)
	bs := BuildV1HeartbeatRes(rid)
	checkHeartbeatRes(t, bs, rid)
}

func checkHeartbeatReq(t *testing.T, bs []byte, rid uint64) {
	msg := buildV1Msg(t, bs)
	assertTrue(msg.Rid == rid, "heartbeat rid", t)
	req, err := DecodeMotanV1Request(msg)
	if err != nil {
		t.Fatalf("read v1 req msg fail. err:%v", err)
	}
	assertTrue(IsV1HeartbeatReq(req), "is heartbeat req", t)
}

func checkHeartbeatRes(t *testing.T, bs []byte, rid uint64) {
	msg := buildV1Msg(t, bs)
	assertTrue(msg.Rid == rid, "heartbeat rid", t)
	res, err := DecodeMotanV1Response(msg)
	if err != nil {
		t.Fatalf("read v1 res msg fail. err:%v", err)
	}
	assertTrue(IsV1HeartbeatRes(res), "is heartbeat res", t)
}

func TestBuildV1ExceptionResponse(t *testing.T) {
	rid := uint64(84379387433)
	errStr := "test error:slkdfjie&^*&3627%&^%^%$$#%$@*)(*ruoisu8"
	bs := BuildV1ExceptionResponse(rid, errStr)
	msg := buildV1Msg(t, bs)
	res, err := DecodeMotanV1Response(msg)
	if err != nil {
		t.Fatalf("read v1 res msg fail. err:%v", err)
	}
	assertTrue(res.GetRequestID() == rid, "res rid", t)
	assertTrue(res.GetException() != nil, "has exception", t)
	assertTrue(res.GetException().ErrMsg == "v1: has exception, class:com.weibo.api.motan.exception.MotanServiceException", "error string", t)
	assertTrue(res.GetException().ErrType == motan.ServiceException, "error type", t)
}

func TestWriteHessianString(t *testing.T) {
	shortStr := "oipauepriwo8&(^^$%30984--09-pioek;flks_)*)(&*&^$%^#jdkfei" // length = 57 (length > 31 && length < 1024)
	var longStr string
	for i := 0; i < 20; i++ { // length = 57*20 = 1140 (length > 1023)
		longStr += shortStr
	}
	tests := []struct {
		name string
		str  string
		bs   []byte
	}{
		{"direct str", "sdfeuier", []byte{8, 115, 100, 102, 101, 117, 105, 101, 114}},
		{"short str", shortStr, []byte{48, 57, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105}},
		{"normal str", longStr, []byte{83, 4, 116, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105, 111, 105, 112, 97, 117, 101, 112, 114, 105, 119, 111, 56, 38, 40, 94, 94, 36, 37, 51, 48, 57, 56, 52, 45, 45, 48, 57, 45, 112, 105, 111, 101, 107, 59, 102, 108, 107, 115, 95, 41, 42, 41, 40, 38, 42, 38, 94, 36, 37, 94, 35, 106, 100, 107, 102, 101, 105}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			checkStrEncode(t, tt.str, tt.bs)
		})
	}

}

func checkStrEncode(t *testing.T, str string, bs []byte) {
	buf := motan.NewBytesBuffer(128)
	writeHessianString(str, buf)
	assertTrue(bytes.Equal(buf.Bytes(), bs), "string encode bytes", t)
}
